import { config } from 'dotenv';
config();
import {
  Client,
  GatewayIntentBits,
  Routes,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} from 'discord.js';


const TOKEN = process.env.BOT_TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const GUILD_ID = '1074328033395216464';

const ROLES = {
  COURSE1: '1074716801432297592',
  COURSE2: '',
  COURSE3: '',
  COURSE4: '',
  COURSE5: '',
};

const client = new Client({ intents: [GatewayIntentBits.Guilds] });

const commands = [];

client.on('ready', async () => {
  console.log('Bot is online');

   const channel = client.channels.cache.get('1074328034070503487');
   console.log(channel);
   channel.send({
     content: '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –∫—É—Ä—Å–æ–≤',
     components: [
       new ActionRowBuilder().setComponents(
         new ButtonBuilder()
           .setCustomId('course1')
		   .setEmoji('üêß')
           .setLabel('Linux –∫—É—Ä—Å "exec-rm"')
           .setStyle(ButtonStyle.Success),
         new ButtonBuilder()
           .setCustomId('course2')
           .setLabel('–û—Å–Ω–æ–≤—ã —Å–µ—Ç–µ–π')
           .setStyle(ButtonStyle.Secondary)
		   .setDisabled(true),
//         new ButtonBuilder()
//           .setCustomId('course3')
//           .setLabel('–ö—É—Ä—Å 3')
//           .setStyle(ButtonStyle.Primary),
//         new ButtonBuilder()
//           .setCustomId('course4')
//           .setLabel('–ö—É—Ä—Å 4')
//           .setStyle(ButtonStyle.Primary),
//         new ButtonBuilder()
//           .setCustomId('course5')
//           .setLabel('–ö—É—Ä—Å 5')
//           .setStyle(ButtonStyle.Primary)
       ),
     ],
   });
});

client.on('interactionCreate', async (interaction) => {
  if (interaction.isButton()) {
    const role = interaction.guild.roles.cache.get(
      ROLES[interaction.customId.toUpperCase()] 
    );

    if (!role)
      return interaction.reply({ content: '–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ä–æ–ª—å Discord —Å–µ—Ä–≤–µ—Ä–∞', ephemeral: true });

    const hasRole = interaction.member.roles.cache.has(role.id);
    console.log(hasRole);

    if (hasRole)
      return interaction.member.roles
        .remove(role)
        .then((member) =>
          interaction.reply({
            content: `–†–æ–ª—å ${role} —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member}`,
            ephemeral: true,
          })
        )
        .catch((err) => {
          console.log(err);
          return interaction.reply({
            content: `–£–ø—Å, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –†–æ–ª—å ${role} –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member}`,
            ephemeral: true,
          });
        });
    else
      return interaction.member.roles
        .add(role)
        .then((member) =>
          interaction.reply({
            content: `–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—É—Ä—Å–æ–º —Ä–æ–ª—å ${role} –±—ã–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${member}`,
            ephemeral: true,
          })
        )
        .catch((err) => {
          console.log(err);
          return interaction.reply({
            content: `–£–ø—Å, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –†–æ–ª—å ${role} –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member}`,
            ephemeral: true,
          });
        });
  }
});

async function main() {
  try {
    client.login(TOKEN);
  } catch (err) {
    console.log(err);
  }
}

main();